@DATABASE SCREENSLIB
@Author Conversion program
@NODE OVERVIEW "Overview of SCREENSLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software



@ENDNODE OVERVIEW

@NODE Screen "SCREENSLIB"

@{fg shine}Statement: Screen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Screen [Screen#,Mode[,Title$]]|[Screen#,X,Y,W,H,D,Viewmode,Title$,Dpen,Bpen[,BitMap#]

Screen will open an Intuition screen. The are 2 formats of the screen 
command, a quick format, and a long format.

The quick format of the Screen commands involves 3 parameters - Screen#, 
Mode and an optional Title$.

Screen# specifies the screen object to create.

Mode specifies how many bitplanes the screen is to have, and should be in 
the range 1 through 6. Adding 8 to Mode will cause a hi-res screen to be 
opened, as opposed to the default lo-res screen. A hi-res screen may only 
have from 1 to 4 bitplanes. Adding 16 to Mode will cause an interlaced 
screen to be opened.

Title$ allows you to add a title to the screen.

The long format of Screen gives you much more control over how the screen is 
opened with control of the specific ViewMode.

ViewMode	Value	HexValue
HiRes	32768	$8000
HAM	2048	$0800  
HBrite	128	$0080   
LACE	4	$0004   
LoRes	0	$0000



@ENDNODE Screen

@NODE WbToScreen "SCREENSLIB"

@{fg shine}Statement: WbToScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WbToScreen Screen#

WbToScreen will assign the Workbench screen a screen object number. This 
allows you to perform any of the functions that you would normally do own 
your own screens, on the Workbench screen. It's main usage is to allow you 
to open windows on the Workbench screen.

After execution, the Workbench screen will become the currently used screen.


@ENDNODE WbToScreen

@NODE LoadScreen "SCREENSLIB"

@{fg shine}Statement: LoadScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : LoadScreen Screen#,Filename$[,Palette#]

LoadScreen loads an IFF ILBM picture into the screen object specified by 
Screen#. The file that is loaded is specified by Filename$.

You can also choose to load in the colour palette for the screen, by 
specifying the optional Palette#. This value is the object number of the 
palette you want the pictures colours to be loaded into. For the colours to 
be used on your screen, you will have to use the Use Palette statement.


@ENDNODE LoadScreen

@NODE FindScreen "SCREENSLIB"

@{fg shine}Statement: FindScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FindScreen Screen#[,Title$]

This command will find a screen and give it an object number so it can be 
referenced in your programs. If Title$ is not specified, then the foremost 
screen is found and given the object number Screen#. If the Title$ argument 
is specified, then a screen will be searched for that has this name.

After execution, the found screen will automatically become the currently 
used screen.


@ENDNODE FindScreen

@NODE SMouseX "SCREENSLIB"

@{fg shine}Statement: SMouseX@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SMouseX 

SMouseX returns the horizontal position of the mouse relative to the left 
edge of the currently used screen.


@ENDNODE SMouseX

@NODE SMouseY "SCREENSLIB"

@{fg shine}Statement: SMouseY@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SMouseY 

SMouseY returns the vertical position of the mouse relative to the top of 
the current screen.


@ENDNODE SMouseY

@NODE ShowScreen "SCREENSLIB"

@{fg shine}Statement: ShowScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShowScreen Screen#

ShowScreen will cause the specified screen object to be moved to the front 
of the display.








@ENDNODE ShowScreen

@NODE ScreenPens "SCREENSLIB"

@{fg shine}Statement: ScreenPens@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ScreenPens Text,Shine,Shadow,Fill,FillText,Background,HighLight

ScreenPens configures the 10 default pens used for system gadgets in 
WorkBench 2.0. Any Screens opened after a ScreenPens statement will use the 
pens defined.

This command will have no affect when used with Workbench 1.3 or earlier.


@ENDNODE ScreenPens

@NODE ViewPort "SCREENSLIB"

@{fg shine}Function: ViewPort@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : =ViewPort (Screen#)

The ViewPort function returns the location of the specified screens 
ViewPort. The ViewPort address can be used with graphics.library commands 
and the like.


@ENDNODE ViewPort

@NODE ShowBitMap "SCREENSLIB"

@{fg shine}Statement: ShowBitMap@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShowBitMap [BitMap#]

Modes:Amiga

Library: ScreensLib

Description:

The ShowBitMap command is the Amiga-mode version of the Show command. It 
enables you to change a Screens bitmap allowing double buffered (flicker 
free) animation to happen on a standard Intuition Screen.

Unlike Blitz mode it is better to do ShowBitMap then VWait to sync up with 
the Amiga's display, this will make sure the new bitmap is being displayed 
before modifying the previous BitMap.


@ENDNODE ShowBitMap

@NODE CloseScreen "SCREENSLIB"

@{fg shine}Statement: CloseScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CloseScreen Screen#

CloseScreen has been added for convenience. Same as Free Screen but a little 
more intuitive (especially for those that have complained about such matters 
(yes we care)).


@ENDNODE CloseScreen

@NODE HideScreen "SCREENSLIB"

@{fg shine}Statement: HideScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : HideScreen Screen#

Move Screen to back of all Screens open in the system.


@ENDNODE HideScreen

@NODE BeepScreen "SCREENSLIB"

@{fg shine}Statement: BeepScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BeepScreen Screen#

Flash specified screen.


@ENDNODE BeepScreen

@NODE MoveScreen "SCREENSLIB"

@{fg shine}Statement: MoveScreen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MoveScreen Screen#,deltax,deltay

Move specified screen by specified amount. Good for system friendly special 
effects.


@ENDNODE MoveScreen

@NODE ScreenTags "SCREENSLIB"

@{fg shine}Statement: ScreenTags@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ScreenTags Screen#,Title$ [&TagList] or [[,Tag,Data]...]

Full access to all the Amiga's new display resoutions is now available in 
Amiga mode by use of the Screen Tags command. The following tags are of most 
interest to Blitz2 programmers: (see autodocs/
 
#Left=$80000021:#Top=$80000022:#Width=$80000023:#Height=$80000024
#Depth=$80000025:#DetailPen=$80000026:#_BlockPen=$80000027
#Title=$80000028:#Colors=$80000029:#ErrorCode=$8000002A
#Font=$8000002B:#SysFont=$8000002C:#Type=$8000002D:#BitMap=$8000002E
#PubName=$8000002F:#PubSig=$80000030:#PubTask=$80000031
#DisplayID=$80000032:#DClip=$80000033:#Overscan=$80000034
#Obsolete1=$80000035

#ShowTitle=$80000036:#Behind=$80000037:#_Quiet=$80000038
#AutoScroll=$80000039:#Pens=$8000003A:#FullPalette=$8000003B
#ColorMapEntries=$8000003C:#Parent=$8000003D:#Draggable=$8000003E
#Exclusive=$8000003F

#SharePens=$80000040:#BackFill=$80000041:#_Interleaved=$80000042
#Colors32=$80000043:#VideoControl=$80000044
#FrontChild=$80000045:#BackChild=$80000046
#LikeWorkbench=$80000047:#Reserved=$80000048

; 
; open super wide screen with overscan set for smooth horizontal scroll 
; for 2.0 and above with amigalibs.res in resident
;

  
#_BitMap=$8000002E:#_Overscan=$80000034:#_Width=$80000023:#_Height=$80000024 

 
  BitMap 0,1280,512,2:Circlef 320,256,256,1 
 
  ScreenTags 0,"TEST",#_BitMap,Addr
  BitMap(0),#_Overscan,1,#_Width,640,#_Height,512 
 
  *vp.ViewPort=ViewPort(0) 
 
  While Joyb(0)=0 
    VWait 
    *vp\DxOffset=-SMouseX,-SMouseY 
    ScrollVPort_ *vp 
  Wend 
@ENDNODE ScreenTags

@NODE MAIN "SCREENSLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}SCREENSLIB@{ub}                                  |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

               @{" BeepScreen   " link BeepScreen}                @{" CloseScreen  " link CloseScreen}
               @{" FindScreen   " link FindScreen}                @{" HideScreen   " link HideScreen}
               @{" LoadScreen   " link LoadScreen}                @{" MoveScreen   " link MoveScreen}
               @{" Screen       " link Screen}                @{" ScreenPens   " link ScreenPens}
               @{" ScreenTags   " link ScreenTags}                @{" ShowBitMap   " link ShowBitMap}
               @{" ShowScreen   " link ShowScreen}                @{" SMouseX      " link SMouseX}
               @{" SMouseY      " link SMouseY}                @{" ViewPort     " link ViewPort}

@ENDNODE MAIN

