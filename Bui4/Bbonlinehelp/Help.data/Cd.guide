@DATABASE "CD.guide"

@NODE CD01
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: LoadShape
--------------------------------------------------------------------------
@{fg text}Syntax: LoadShape Shape#,Filename$[,Palette#]
Modes: Amiga

Description:
The LoadShape command has now been extended to support anim brushes, if 
the file is an anim brush the shapes are loaded into consecutive shapes 
starting with the Shape# provided.
@ENDNODE
@NODE CD0A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ShowBitMap
--------------------------------------------------------------------------
@{fg text}Syntax: ShowBitMap [BitMap#]
Modes: Amiga
Library: ScreensLib

Description:
The ShowBitMap command is the Amiga-mode version of the Show command. It
enables you to change a Screens bitmap allowing double buffered (flicker 
free) animation to happen on a standard Intuition Screen.

Unlike Blitz mode it is better to do ShowBitMap then VWait to sync up 
with the Amiga's display, this will make sure the new bitmap is being 
displayed before modifying the previous BitMap.
@ENDNODE
@NODE CD0D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: BeepScreen@{fg text}
--------------------------------------------------------------------------
Syntax: BeepScreen Screen#
 
Flash specified screen.
@ENDNODE
@NODE CD0F
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statament: @{fg shine}DecodeShapes@{fg text}
--------------------------------------------------------------------------
Syntax   : DecodeShapes Shape#[,Shape#],MemoryLocation
Library  : shapeslib

Description:
DecodeShapes, similar to DecodeMedModule ensures the data is in chip and
then configures the Shape object(s) to point to the data.
@ENDNODE
@NODE CD10
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}InitShape@{fg text}
--------------------------------------------------------------------------
Syntax   : InitShape Shape#,Width,Height,Depth
Library  : shapeslib

Description:
InitShape has been added to simple create blank shape objects. Programmers
who make a habit of using ShapesBitMap to render graphics to a shape 
object will appreciate this one for sure.
@ENDNODE
@NODE CE0D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: AGARGB
--------------------------------------------------------------------------
@{fg text}Syntax: AGARGB Colour Register,Red,Green,Blue
Modes: Amiga

Description:
The AGARGB command is the AGA equivalent of the RGB command. The 'Red',
'Green' and 'Blue' parameters must be in the range 0 through 255, while
'Colour Register' is limited to the number of colours available on the 
currently used screen.

Example:

	;
	; AGA test
	;

	Screen 0,0,0,1280,512,8,$8024,"SUPER HIRES 256 COLORS",1,2

	ScreensBitMap 0,0

	For i=0 To 255
		AGARGB i,i/2,i/3,i       ;shades of purple
  		Circle 640,256,i*2,i,i   ;big SMOOTH circles
	Next

	MouseWait
@ENDNODE
@NODE CE12
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: AGABlue
--------------------------------------------------------------------------
@{fg text}Syntax: AGABlue(colour register)
Modes: Amiga

Description:
The AGABlue function returns the blue component of the specified colour
register within the currently used screen. The returned value will be 
within the range 0 (being no blue) through 255 (being full blue).
@ENDNODE
@NODE CE13
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ShowPalette@{fg text}
--------------------------------------------------------------------------
Syntax: ShowPalette Palette#

ShowPalette replaces Use Palette for copying a palette's colours to the
current Screen or Slice.
@ENDNODE
@NODE CE14
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: NewPaletteMode@{fg text}
--------------------------------------------------------------------------
Syntax: NewPaletteMode On|Off
 
The NewPaletteMode flag has been added for compatibility with older 
Blitz2 programs. By setting NewPaletteMode to On the Use Palette command
merely makes the specified palette the current object and does not try 
to copy the colour information to the current Screen or Slice.
@ENDNODE
@NODE CE0E
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: AGAPalRGB
--------------------------------------------------------------------------
@{fg text}Syntax: AGAPalRGB Palette#,Colour Register,Red,Green,Blue
Modes: Amiga

Description:
The AGAPalRGB command is the AGA equivalent of the PalRGB command. 
AGAPalRGB allows you to set an individual colour register within a 
palette object. This command only sets up an entry in a palette object,
and will not alter the actual screen palette until a 'Use Palette' is 
executed.
@ENDNODE
@NODE CE10
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: AGARed
--------------------------------------------------------------------------
@{fg text}Syntax: AGARed(colour register)
Modes: Amiga

Description:
The AGARed function returns the red component of the specified colour 
register within the currently used screen. The returned value will be 
within the range 0 (being no red) through 255 (being full red).
@ENDNODE
@NODE CE11
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: AGAGreen
--------------------------------------------------------------------------
@{fg text}Syntax: AGAGreen(colour register)
Modes: Amiga

Description:
The AGAGreen function returns the green component of the specified 
colour register within the currently used screen. The returned value 
will be within the range 0 (being no green) through 255 (being full 
green).
@ENDNODE
@NODE CE15
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}CyclePalette@{fg text}
--------------------------------------------------------------------------
Syntax   : CyclePalette Palette# 
Library  : palettelib

Description:
CyclePalette uses the standard color cycling parameters in the palette
object to cycle the colors. Unlike the Cycle command which copied the
resulting palette to the current screen the CyclePalette command just
modifies the palette object and can hence be used with the DisplayBitmap
command in the new Display library.
@ENDNODE
@NODE CE16
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}FadePalette@{fg text}
--------------------------------------------------------------------------
Syntax   : FadePalette SrcPalette#,DestPalette#,Brightness.q
Library  : palettelib

Description:
FadePalette multiplies all colours in a Palette by the Brightness argument
and places the result in the DestPalette.
@ENDNODE
@NODE CE17
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}InitPalette@{fg text}
--------------------------------------------------------------------------
Syntax   : InitPalette Palette#,NumColors
Library  : palettelib

Description:
InitPalette simply initialises a palette object to hold NumColors. All 
colors will be set to black.
@ENDNODE
@NODE CE18
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}PaletteRange@{fg text}
--------------------------------------------------------------------------
Syntax   : PaletteRange Palette#,StartCol,EndCol,r0,g0,b0,r1,g1,b1
Library  : palettelib

Description:
PaletteRange creates a spread of colors within a palette. Similar to 
DPaint's spread function PaletteRange takes a start and end colour and 
creates the color tweens between them.
@ENDNODE
@NODE CE19
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}DuplicatePalette@{fg text}
--------------------------------------------------------------------------
Syntax   : DuplicatePalette SrcPalette#,DestPalette#
Library  : palettelib

Description:
DuplicatePalette simply creates a new Palette which exactly matches the
SrcPalette.
@ENDNODE
@NODE CE1A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}DecodePalette@{fg text}
--------------------------------------------------------------------------
Syntax   : DecodePalette Palette#,MemoryLocation[,Palette Offset]
Library  : palettelib

Description:
DecodePalette allows the programmer to unpack included iff palette 
information to Blitz2 palette objects.
@ENDNODE
@NODE CF0B
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: CloseScreen@{fg text}
--------------------------------------------------------------------------
Syntax: CloseScreen Screen#
 
CloseScreen has been added for convenience. Same as Free Screen but a 
little more intuitive (especially for those that have complained about
such matters (yes we care)).
@ENDNODE
@NODE CF0C
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: HideScreen@{fg text}
--------------------------------------------------------------------------
Syntax: HideScreen Screen#
 
Move Screen to back of all Screens open in the system.
@ENDNODE
@NODE CF0F
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ScreenTags@{fg text}
--------------------------------------------------------------------------
Syntax: ScreenTags Screen#,Title$ [&TagList] or [[,Tag,Data]...]
 
Full access to all the Amiga's new display resoutions is now available 
in Amiga mode by use of the Screen Tags command. The following tags are
of most interest to Blitz2 programmers: (see autodocs)
 
#Left=$80000021  
#Top=$80000022
#Width=$80000023
#Height=$80000024
#Depth=$80000025
#DetailPen=$80000026
#_BlockPen=$80000027
#Title=$80000028
#Colors=$80000029
#ErrorCode=$8000002A
#Font=$8000002B
#SysFont=$8000002C
#Type=$8000002D
#BitMap=$8000002E
#PubName=$8000002F
#PubSig=$80000030
#PubTask=$80000031
#DisplayID=$80000032
#DClip=$80000033
#Overscan=$80000034
#Obsolete1=$80000035

#ShowTitle=$80000036
#Behind=$80000037
#_Quiet=$80000038
#AutoScroll=$80000039
#Pens=$8000003A
#FullPalette=$8000003B
#ColorMapEntries=$8000003C
#Parent=$8000003D
#Draggable=$8000003E
#Exclusive=$8000003F

#SharePens=$80000040
#BackFill=$80000041
#_Interleaved=$80000042
#Colors32=$80000043
#VideoControl=$80000044
#FrontChild=$80000045
#BackChild=$80000046
#LikeWorkbench=$80000047
#Reserved=$80000048

; 
; open super wide screen with overscan set for smooth horizontal scroll 
; for 2.0 and above with amigalibs.res in resident
;

#_BitMap=$8000002E:#_Overscan=$80000034:#_Width=$80000023:
#_Height=$80000024 
 
BitMap 0,1280,512,2:Circlef 320,256,256,1 
 
ScreenTags 0,"TEST",#_BitMap,Addr BitMap(0),#_Overscan,1,#_Width,640,
                    #_Height,512 
 
*vp.ViewPort=ViewPort(0) 
 
While Joyb(0)=0 
     VWait 
     *vp\DxOffset=-SMouseX,-SMouseY 
     ScrollVPort_ *vp 
Wend 
@ENDNODE
@NODE D088
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ILBMViewMode
--------------------------------------------------------------------------
@{fg text}Syntax: ILBMViewMode
Modes: Amiga/Blitz
Library: ILBMIFFLib

Description:
ILBMViewMode returns the viewmode of the file that was processed by 
ILBMInfo. This is useful for opening a screen in the right mode before 
using LoadScreen etc. The different values of ViewMode are as follows 
(add/or them for different combinations):

32768 ($8000) hires  
2048  ($0800) ham   
128   ($0080) halfbright     
4     ($0004) interlace     
0     ($0000) lores

See Also: @{" ILBMInfo " link BUM_ILBMINFO}

@{fg shine}Example:@{fg text}

;
;ilbminfo example 
;
;iff file name could use f$=par$(1) to use cli argument 
f$="test.iff" 
;get ilbm information 
ILBMInfo f$ 
;open screen with correct parameters
Screen 0,0,0,ILBMWidth,ILBMHeight,ILBMDepth,ILBMViewMode,"",1,2 
;load the iff onto the screens
LoadScreen 0,f$,0 
;set the palette
Use Palette 0 
MouseWait 
@ENDNODE
@NODE D089
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Statement: @{fg shine}DecodeILBM@{fg text}
--------------------------------------------------------------------------
Syntax   : DecodeILBM BitMap#,MemoryLocation
Library  : ilbmifflib

Description:
A very fast method of unpacking standard iffilbm data to a bitmap. Not
only does this command allow a faster method of loading standard IFF
files but allows the programmer to "incbin" iff pictures in their programs.
See the discussion above for using DecodeILBM on both files and included
memory.
@ENDNODE
@NODE E081
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: WBWidth Height Depth & ViewMode
--------------------------------------------------------------------------
@{fg text}Syntax: WBWidth, WBHeight, WBDepth & WBViewMode
Modes: Amiga

Description:
The functions WBWidth, WBHeight, WBDepth & WBViewMode return the width, 
height,depth & viewmode of the current WorkBench screen as configured 
by preferences.
@ENDNODE
@NODE E082
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: WBWidth Height Depth & ViewMode
--------------------------------------------------------------------------
@{fg text}Syntax: WBWidth, WBHeight, WBDepth & WBViewMode
Modes: Amiga

Description:
The functions WBWidth, WBHeight, WBDepth & WBViewMode return the width, 
height,depth & viewmode of the current WorkBench screen as configured 
by preferences.
@ENDNODE
@NODE E083
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: WBWidth Height Depth & ViewMode
--------------------------------------------------------------------------
@{fg text}Syntax: WBWidth, WBHeight, WBDepth & WBViewMode
Modes: Amiga

Description:
The functions WBWidth, WBHeight, WBDepth & WBViewMode return the width, 
height,depth & viewmode of the current WorkBench screen as configured 
by preferences.
@ENDNODE
@NODE E084
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: WBWidth Height Depth & ViewMode
--------------------------------------------------------------------------
@{fg text}Syntax: WBWidth, WBHeight, WBDepth & WBViewMode
Modes: Amiga

Description:
The functions WBWidth, WBHeight, WBDepth & WBViewMode return the width, 
height,depth & viewmode of the current WorkBench screen as configured 
by preferences.
@ENDNODE
@NODE E085
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: Processor & ExecVersion
--------------------------------------------------------------------------
@{fg text}Syntax: Processor & ExecVersion
Modes: Amiga

Description:
The two functions Processor & ExecVersion return the relevant 
information about the system the program is running on. The values 
returned are as follows:

	ExecVersion   OS Release    Processor   Part#
        ------------+------------   -----------+---------------	
        33          |  1.2          0          | 68000
        34?         |  1.3          1          | 68010
        36          |  2.0          2          | 68020		
        39          |  3.0          3          | 68030
	            |               4          | 68040
@ENDNODE
@NODE E087
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Functions: Processor & ExecVersion
--------------------------------------------------------------------------
@{fg text}Syntax: Processor & ExecVersion
Modes: Amiga

Description:
The two functions Processor & ExecVersion return the relevant 
information about the system the program is running on. The values 
returned are as follows:

	ExecVersion   OS Release    Processor   Part#
        ------------+------------   -----------+---------------	
        33          |  1.2          0          | 68000
        34?         |  1.3          1          | 68010
        36          |  2.0          2          | 68020		
        39          |  3.0          3          | 68030
	            |               4          | 68040
@ENDNODE
@NODE E101
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: CreateMsgPort()
--------------------------------------------------------------------------
@{fg text}Syntax: PortAddress.l = CreateMsgPort("Name")
MODES: Amiga

Description:
CreateMsgPort is a general Function and not specific to ARexx.

CreateMsgPort opens an intuition PUBLIC message port of the name 
supplied as the only argument. If all is well the address of the port
created will be returned to you as a LONGWORD so the variable that you 
assign it to should be of type long.

If you do not supply a name then a private MsgPort will be opened for 
you.

	Port.l=CreateMsgPort("PortName")

It is important that you check you actually succeeded in opening a port
in your program. The following code or something similar will suffice.

	Port.l=CreateMsgPort("Name")
	IF Port=0 THEN Error_Routine{}

The name you give your port will be the name that Arexx looks for as the
HOST address,(and is case sensitive) so take this into consideration 
when you open your port.  NOTE IT MUST BE A UNIQUE NAME AND SHOULD NOT
INCLUDE SPACES.
@ENDNODE
@NODE E102
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: DeleteMsgPort()
--------------------------------------------------------------------------
@{fg text}Syntax: DeleteMsgPort Port
Modes: Amiga

Desription:
DeleteMsgPort deletes a MessagePort previously allocated with 
CreateMsgPort(). The only argument taken by DeleteMsgPort is the address
returned by CreateMsgPort(). If the Port was a public port then it will 
be removed from the public port list.

	Port.l=CreateMsgPort("Name")
	IF Port=0 Then End
	DeleteMsgPort Port

Error checking is not critical as if this fails we have SERIOUS PROBLEMS.

@{fg shine}YOU MUST WAIT FOR ALL MESSAGES FROM AREXX TO BE RECEIVED BEFORE YOU 
DELETE THE MSGPORT. IF YOU NEGLECT TO DELETE A MSGPORT BLITZ2 WILL 
DO IT FOR YOU AUTOMATICALLY ON PROGRAM EXIT.@{fg text}
@ENDNODE
@NODE E103
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: Wait
--------------------------------------------------------------------------
@{fg text}Syntax: Wait
Modes: Amiga

Description:
Wait halts all program execution until an event occurs that the program
is interested in.  Any intuition event such as clicking on a gadget in 
a window will start program execution again.

A message arriving at a MsgPort will also start program execution again.
So you may use Wait to wait for input from any source including messages
from ARexx to your program.

Wait should always be paired with EVENT if you need to consider 
intuition events in your event handler loop.

	Repeat
  		Wait:rmsg.l=REXXEVENT(Port):ev.l=EVENT
  		IF IsRexxMsg(Rmsg) Process_Rexx_Messages{}:ENDIF
  		;
  		;
  		;Rest of normal intuition event loop statements case etc
  		;
	Until ev =$200
@ENDNODE


