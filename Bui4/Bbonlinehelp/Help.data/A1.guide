@DATABASE "A1.guide"

@NODE A101
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: ClearBitmap@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ClearBitmap source#,delay[,offset,height]

This is used to clear a low res, any height, bitmap in a very pleasant
way.  The parameters are the same as for FadeInBitmap except that
only one bitmap is needed.  The delay parameter i used for the same
reason as in FadeInBitmap - to slow down the effect.  The optional
parameters allow you to set a y start value for the clear and the
height (in pixels) of the clear.

See: @{" FadeInBitmap " link A102}
@ENDNODE
@NODE A102
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FadeInBitmap@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FadeInBitmap source#,dest#,delay[,offset1,offset2,height]

This is used to make a low rez, any height, bitmap appear on another
one in a nice way.  Source# and dest# should be bitmap object numbers
and delay is the 'slow-down' value for the fade.  This is necessary
because this routine works very fast - at full speed it looks just like
a slow screen copy.  You should note that the delay is taken as being a
word, thus don't pass 0 or you'll actually get a delay of 65535.  This
routine will adjust itself to take into account the depth of the bitmap,

WARNING: the depth of the destination bitmap should be AT   LEAST as big
as the depth of the source# bitmap because the depth of the fade is 
taken from the source# bitmap.

The optional parameters in this command allow you to set respectively:
the source bitmap y offset, the destination bitmap y offset and the
height of the fade (in pixels).  If these parameters are left out then
the fade automatically occurs across the full size of the bitmap.
  
See: @{" ClearBitmap " link A101}
@ENDNODE
@NODE A103
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: ZoomX4@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX4 source#,dest#,add_source,add_dest,width,height

This is exactly the same as ZoomX2 except that a times 4 zoom is done
by this command.

Note:	You can zoom from a bitmap to a different size bitmap BUT the
        destination bitmap must be as deep as the source and big enough
	to hold the zoomed data.

See: @{" ZoomX2 " link A107},@{" ADDValue " link A10B}
@ENDNODE
@NODE A105
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: ZoomXY@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomXY xzoom_value,yzoom_value,height

This command does a zoom based on the values you give it.  You should
note, though, that zoom values should be integer values (no fractional
part).  The height is the height in pixels that the source data should 
be zomed to.  Please note that this command is different to the other 
zoom commands in that the output of it is clipped to fit inside 320 
pixels.

This command should only be used after InitZoomXY has been called.
This routine has an extra feature in that if you give both zoom values
as 1 then a bitmap copy is done from the source to the dest using the
offsets given and the height.

See: @{" InitZoomXY " link A106}
@ENDNODE
@NODE A106
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: InitZoomXY@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: InitZoomXY source#,dest#,add_source,add_dest

This command initialises the ZoomXY routine to the bitmaps you want it
to work on.  You MUST use this routine before calling ZoomXY.  The
parameters are the same as the first four parameter for the ZoomXn
commands - source and dest bitmaps and add_source/dest values.

See: @{" ZoomXY " link A105}
@ENDNODE
@NODE A107
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: ZoomX2@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX2 source#,dest#,add_source,add_dest,width,height

This command does a very fast X2 zoom.  It works with two bitmaps - one
source and one dest (note: these can be the same bitmap but you should
be careful that the zoom is not done over the source data).  The two
parameters add_source and add_dest allow you to specify the position of
the start of the zoom, they specified as byte offsets from the top left
corner of the bitmaps (byte 0).  These values can be calculated by the
following method:

	add_source=(Y x BITMAP_WIDTH (in bytes) + (X / 8)

or by using the built in command ADDValue.  Width and height are both
specified in pixels.

NOTE: There is no clipping on this command - be careful not to zoom off
      the edges of bitmaps. you can zoom from a bitmap to a different 
      size bitmap BUT the destination bitmap must be as deep as the 
      source and big enough to hold the zoomed data.

See: @{" ZoomX4 " link A103},@{" ZoomX8 " link A10A},@{" ADDValue " link A10B}
@ENDNODE
@NODE A10A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: ZoomX8@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX8 source#,dest#,add_source,add_dest,width,height

This is exactly the same as ZoomX2 except that a times 8 zoom is done
by this command

See: @{" ZoomX2 " link A107},@{" ADDValue " link A10B}
@ENDNODE
@NODE A10B
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: ADDValue@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: addval.w=ADDValue(bitmap#,x,y)

This function can be used the calculate the add_source and add_dest
values used in all the zoom commands.  Just give the bitmap number, x
co-ordinate and the y co-ordinate and you'll get an answer back that can
be used straight in the ZoomXn commands.

See: @{" ZoomX2" link A107},@{" ZoomX4 " link A103},@{" ZoomX8 " link A10A},@{" ZoomXY " link A105}
@ENDNODE
@NODE A10C
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ReduceX2@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ReduceX2 source#,dest#,add_source,add_dest,width,height

Description:
This command halves the given rectangle of one bitmap and pastes it onto
the destination bitmap.  Width should be a multiple of 16, width and 
height should describe a rectangular area that will be reduced (these 
values should be in pixels).

See @{" ZoomX2 " link A107} and other commands for more information about the 
syntax of this command.
@ENDNODE
@NODE A182
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}OpenConsole@{fg text}
--------------------------------------------------------------------------
Syntax : OpenConsole Window#,Console#

Description:
Open a CON: Port for the window, so ANSI output is possible.
@ENDNODE
@NODE A183
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}PrintCon@{fg text}
--------------------------------------------------------------------------
Syntax:  PrintCon Console#,Expression

Description:
Write text to window-console.
@ENDNODE
@NODE A184
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}NprintCon@{fg text}
--------------------------------------------------------------------------
Syntax:  NPrintCon Console#,Expression

Description:
Write text to window-console, and add a Linefeed.
@ENDNODE
@NODE A185
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}CloseConsole@{fg text}
--------------------------------------------------------------------------
Syntax:  CloseConsole Console#

Description:
Close the CON: Port, but NOT the window itself!

@{fg shine}Note:@{fg text}
These command work if you use them only for ONE window...If you wanna 
use the CON's for more windows, so that object are use it doesn' t work 
anymore... Ya see, I need ya help, please...
@ENDNODE
@NODE A201
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Function: @{fg shine}IsLocale@{fg text}
--------------------------------------------------------------------------
Syntax:   result=IsLocale

Description:
There is now way to check the ROM-Version of the Kickstart for locale 
presents. Both, OS 2.0 and 2.1 have the ROM-Version 37.175! So the 
command returns if the locale.library exists on the system.
@ENDNODE
@NODE A202
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}UseCatalog@{fg text}
--------------------------------------------------------------------------
Syntax: UseCatalog Catalogname

Description:
Opens the catalog for your programm. Might by your program is called 
BB2Program the catalog should be called BB2Program.catalog. But you're 
also able to open a catalog from an other program, like Term.catalog.

The catalog files are in an IFF format!!! Read the Commodore 
documentation of it...
@ENDNODE
@NODE A203
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Command: @{fg shine}FreeCatalog@{fg text}
--------------------------------------------------------------------------
Syntax:  FreeCatalog

Description:
Removes the catalog that you opened with UseCatalog.
@ENDNODE
@NODE A204
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
Function: @{fg shine}GetLocaleStr@{fg text}
--------------------------------------------------------------------------
Syntax: GetLocaleStr #StringNumber,DefaultString$

Description:
Read a string from the catalog that you opened with UseCatalog. You have
to give a defaultstring to that command. If the asked string could be 
find in the catalog the default string will be returned. Else the string 
from the catalog will be returned.
@ENDNODE
@NODE A281
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
                               REQUESTER LIBRARY
--------------------------------------------------------------------------

                              Available Commands:

Function: @{fg shine}EasyRequest@{fg text}
--------------------------------------------------------------------------
Syntax:   EasyRequest Result=EasyRequest([#Window,]title$,body$,gtext$)

Description:
A intuition system requester will be open. Optional you could give a 
window number. The title$ is the displayed string in the top. body$ is 
the displayed text in the requester, a Chr$(10) means a linefeed.

gtext$ is the text for the gadgets. Every gadgettext will be added by a 
'|'.  

Examples:  "Ok" will only display one gadget in the requester.
           "Ok|Cancel" add two gadgets to it.
           "1|2|3|4|5" five gadgets are displayed.

@ENDNODE
@NODE BC0D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: VPos     (add to chapter 5)
--------------------------------------------------------------------------
@{fg text}Syntax: VPos
Modes: Amiga/Blitz

Description:
VPos returns the video's beam vertical position. Useful in both high-
speed animation where screen update may need to be synced to a certain 
video beam position (not just the top of frame as with VWait) and for a
fast random nember generator in non frame-synced applications.
@ENDNODE

