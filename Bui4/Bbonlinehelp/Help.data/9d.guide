@DATABASE "9D.guide"

@NODE 9D81
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement/Function: GetIconObject@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : GetIconObject filename$
	 suc.l=GetIconObject (filename$)

This command reads in a .info file from disk.  The filename given will
have '.info' added to the end of it and will be loaded into memory (chip 
or fast depending on what is available for allocation) as a diskobject.
Please refer to the Amiga hardware includes for information about the
diskobject structure (or see your Blitz Basic Amigalibs resident file).

If used as a function, this command will return either FALSE for failure
or the address of the allocated diskobject in memory.
@ENDNODE
@NODE 9D82
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: FindToolValue@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : toolval$=FindToolValue(tooltype$)

This function returns the value of the selected tooltype.  The return
value is a string, and is the part of the tooltype string after the "="
in the tooltype entry.  The tooltype$ string that you pass can be in 
either lower case or uppercase since all testing in done in uppercase, 
although as a general rule, all tooltypes should be in uppercase.

This function will return a null string if the named tooltype was not
found in the list of tooltypes for the file.  If the selected tooltype 
did not have an actual value (e.g. DONOTWAIT) then this function will 
return the string "!!".
@ENDNODE
@NODE 9D83
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement/Function: SetToolValue@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : SetToolValue tooltype$,value$
	 suc.l=SetToolValue (tooltype$,value$)

This command will attempt to set a tooltype that is currently defined to
the specified value.  When used as a function, this command will return
TRUE for success or FALSE for failure, possible failures include: no 
icon file loaded and tooltype not found.  When used, this command 
attempts to allocate memory to store the new tooltype information in, 
it does not attempt to free up the old memory allocated to the tooltype.

This means that you should keep alterations of tooltypes to a minimum.  
The best way to manage tooltypes is:

		1. Open the icon
		2. Read the tooltypes
		3. Close the icon
		4. ... do your program ...
		5. Open the icon
		6. Alter the tooltypes
		7. Save the icon

Using this series of events, you'll keep memory usage (which will be
fairly small anyway...) to the very minimum.
@ENDNODE
@NODE 9D84
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement/Function: PutIconObject@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : PutIconObject filename$
	 suc.l=PutIconObject (filename$)

This command takes a diskobject structure reserved and initialised by
GetIconObject and saves it out to disk as a .info file for the specified
file.  

All current tooltypes and values will be saved with the file. The 
optional parameter allows you to set the type of the file associated
with the .info file.  See SetIconType for possible values for this
parameter.  Note that if you leave out this parameter the icontype will 
not be changed.
@ENDNODE
@NODE 9D85
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement/Function: FreeIconObject@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : FreeIconObject
	 suc.l=FreeIconObject

This command will free up the diskobject that is currently being used.
It will not save out any tooltype changes and will free up the memory
without ANY changes being made to the .info file loaded from disk.
@ENDNODE
@NODE 9D86
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: MatchToolValue@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : suc.l=MatchToolValue(tooltype$,value$)

This command searchs the current list of tooltypes for the selected
tooltype and, if found, attempts to match the values of it with the 
given value.  This command uses the operating system call 
MatchToolType(), it is able to cope with a tool having more than one
value,

  		e.g. LANGUAGE=ENGLISH|FRENCH
			(the | is used to show OR, thus this tooltype
			 means that LANGUAGE equals ENGLISH or FRECH)
		When using match toolvalue with this tooltype, TRUE will
                be returned when you use value$="ENGLISH" or "FRENCH" 
                but not (I think) both.

You should note that for this command, the case of VALUE$ is 
insignificant.
@ENDNODE
@NODE 9D87
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement/Function: NewToolType@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : NewToolType tooltype$,value$
	 suc.l=NewToolType (tooltype$,value$)

This command allocates a new tooltype in the currently loaded .info file
and sets its value.  No check is done to see is the tooltype already
exists and the new tooltype is added to the end of the current list of
tooltypes.
@ENDNODE
@NODE 9D88
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: FindToolNumber@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : toolval$=FindToolNumber(tooltype$)

This command will return the FULL tooltype string in the selected
tooltype position.  If the tooltype number does not exist then "" will 
be returned.

  Example:	tooltypes: "DONOTWAIT"
			   "CLOCKX=157"

	FindToolNumber(0) will return "DONOTWAIT"
	FindToolNumber(1) will return "CLOCKX"
	FindToolNumber(49) will return ""
@ENDNODE
@NODE 9D89
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ClearToolTypes@{fg text}
------------------------------------------------------------------------
Modes  : Amiga
Syntax : ClearToolTypes

This command is used to clear all the tooltype information from the
currently loaded .info file.  It does not attempt, though, to free up 
all the memory reserved to store tooltype names and values, you should
therefore not used this command too many times in a row.  Once you have
used this command, any attempt to read tooltype values will fail.
@ENDNODE
@NODE 9D8A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: SetIconHit@{fg text}
--------------------------------------------------------------------------
Modes  : Amiga
Syntax : SetIconHit width#,height#

This command sets the size of the 'hit-box' around the image in the
currently loaded .info file.  This is only of use if your info file has 
an image associated with it.  You should note that the hit box should 
never be smaller, horizontally or vertically, than the actual size of 
the image.

When Workbench renders an image for a file onto a window, it 
automatically puts a 3d box border around it. The size of the hit box
determines the size of this border.  Your image will always be located 
in the top left border of the hit box.
@ENDNODE
@NODE 9D8B
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ShapeToIcon@{fg text}
--------------------------------------------------------------------------
Modes  : Amiga
Syntax : ShapeToIcon shape#[,shape#]

This command lets you change the images associated with the currently
loaded .info file.  What it does is to set up the .info file in memory 
so that when it is saved out next, the images you give are saved out 
with it. 

Using this command does not actually copy any shape data around memory, 
all it does it place a pointer in the .info to the shape data. You 
should therefore not delete a shape WITHOUT first saving the .info file
to disk (that is of course if you want to keep your changes).

When you use this command, the hit box area for the .info file is
automatically set to the size of the first shape given.  It is 
important, therefore, that the second shape is not larger than the 
first. When you give a second shape, this shape is set up to be the 
'alternate render' image, this means that this is the second image 
associated with the .info file (remember the two windows in the 
IconEditor?)
@ENDNODE
@NODE 9D8C
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: SetIconType@{fg text}
--------------------------------------------------------------------------
Modes  : Amiga
Syntax : SetIconType type#

This command lets you specify the type of the file associated with the
currently loaded .info file.  The type describes whether or not the file
is a tool or project etc...., and can take the following values:

			1	Disk
			2	Drawer
			3	Tool
			4	Project
			5	Trashcan

This command is identical to the menu in the IconEditor 'Type'.
@ENDNODE
@NODE 9D8D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: IconRender@{fg text}
--------------------------------------------------------------------------
Modes  : Amiga
Syntax : IconRender mode#

This command lets you specify what Workbench should do to the icons
image when the user clicks on it.  It lets you choose whether a separate
image should be displayed or whether the current image should just be
modified.  Mode# is made up of several different values that should be
added together to create different effects, these are:

			0	Complement the select box
			1	Draw a box around the image
			2	Draw the alternate image
			3	Don't highlight
			4	Double image icon

Thus if you wanted an icon to change to a second image when selected, 
and the icon has a second image, you would set the render to 6 (4+2).  
This would mean that you had a second image (4) and that you wanted it 
to be displayed when you select the icon (2).

@{fg shine}Note:@{fg text} when you use ShapeToIcon with two shape numbers the IconRender is
automatically set to 6.
@ENDNODE
@NODE 9D8F
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: FindToolType@{fg text}
--------------------------------------------------------------------------
Modes  : Amiga
Syntax : bool=FindToolType (tool$)

This command simply returns true or false to say whether or not the 
given tooltype was found in the currently loaded .info file.
@ENDNODE


