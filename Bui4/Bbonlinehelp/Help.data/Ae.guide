@DATABASE "AE.guide"

@NODE AE01
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: CreateRexxMsg()
--------------------------------------------------------------------------
@{fg text}Syntax: msg.l=CreateRexxMsg(ReplyPort,"exten","HOST")
Modes: Amiga

Description:
CreateRexxMsg() allocates a special Message structure used to 
communicate with Arexx.  If all is successful it returns the LONGWORD 
address of this rexxmsg structure.

The arguments are ReplyPort which is the long address returned by 
CreateMsgPort(). This is the Port that ARexx will reply to after it has 
finished with the message.

EXTEN which is the exten name used by any ARexx script you are wishing 
to run. i.e. if you are attempting to run the ARexx script test.rexx you
would use an EXTEN of "rexx".

HOST is the name string of the HOST port.  Your program is usually the 
HOST and so this equates to the name you gave your port in 
CreateMsgPort(). REMEMBER IT IS CASE SENSITIVE.

As we are allocating resources error checking is important and can be 
achieved with the following code:

	msg.l=CreateRexxMsg(Port,"rexx","HostName")
	IF msg=0 THEN Error_Routine{}
@ENDNODE
@NODE AE03
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN" 
@{fg shine}Statement: FillRexxMsg()
--------------------------------------------------------------------------
@{fg text}Syntax: FillRexxMsg rexxmsg,&FillStruct
Modes: Amiga

Description:
FillRexxMsg allows you to fill all 16 ARGSlots if necessary with either 
ArgStrings or numerical values depending on your requirement.

FillRexxMsg will only be used by those programmers wishing to do more 
advanced things with Arexx, including adding libraries to the ARexx 
library list, adding Hosts,Value Tokens etc.  It is also needed to 
access Arexx using the #RXFUNC flag.

The arguments are a LONG Pointer to a rexxmsg.

The LONG address of a FillStruct NEWTYPE structure. This structure is 
defined in the Arexx.res and has the following form.

NEWTYPE.FillStruct
   Flags.w             ;Flag block
   Args0.l             ; argument block (ARG0-ARG15)
   Args1.l             ; argument block (ARG0-ARG15)
   Args2.l             ; argument block (ARG0-ARG15)
   Args3.l             ; argument block (ARG0-ARG15)
   Args4.l             ; argument block (ARG0-ARG15)
   Args5.l             ; argument block (ARG0-ARG15)
   Args6.l             ; argument block (ARG0-ARG15)
   Args7.l             ; argument block (ARG0-ARG15)
   Args8.l             ; argument block (ARG0-ARG15)
   Args9.l             ; argument block (ARG0-ARG15)
   Args10.l            ; argument block (ARG0-ARG15)
   Args11.l            ; argument block (ARG0-ARG15)
   Args12.l            ; argument block (ARG0-ARG15)
   Args13.l            ; argument block (ARG0-ARG15)
   Args14.l            ; argument block (ARG0-ARG15)
   Args15.l            ; argument block (ARG0-ARG15)
   EndMark.l           ;End of the FillStruct
End NEWTYPE

The Args?.l are the 16 slots that can possibly be filled ready for 
converting into the RexxMsg structure.  The Flags.w is a WORD value 
representing the type of LONG word you are supplying for each ARGSLOT 
(Arg?.l).

Each bit in the Flags WORD is representative of a single Args?.l, where
a set bit represents a numerical value to be passed and a clear bit 
represents a  string argument to be converted into a ArgString before 
installing in the RexxMsg.  The Flags Value is easiest to supply as a 
binary number to make the bits visible and would look like this.

%0000000000000000  ;This represents that all Arguments are Strings.

%0110000000000000  ;This represent the second and third as being 
                    integers.

FillRexxMsg expects to find the address of any strings in the Args?.l 
slots so it is important to remember when filling a FillStruct that you 
must pass the string address and not the name of the string.  This is 
acomplished using the '&' address of operand.

So to use FillRexxMsg we must do the following things in our program:

1. Allocate a FillStruct
2. Set the flags in the FillStruct\Flags.w
3. Fill the FillStruct with either integer values or the
   addresses of our string arguments.
4. Call FillRexxMsg with the LONG address of our rexxmsg and the
   LONG address of our FillStruct.

To accomplish this takes the following code:

	;Allocate our FillStruct (called F)

	DEFTYPE.FillStruct F   

	;assign some string arguments

	T$="open":T1$="0123456789"   

	;Fill in our FillStruct with flags and (&) addresses of our 
         strings

	F\Flags= %0010000000000000,&T$,&T1$,4

	;Third argument here is an integer (4).

	Port.l=CreateMsgPort("host")
	msg.l=CreateRexxMsg(Port,"vc","host")

	FillRexxMsg msg,&F

 	;<-3 args see #RXFUNC

	SendRexxCommand msg,"",#RXFUNC|#RXFF_RESULT|3

@ENDNODE
@NODE AE04
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ClearRexxMsg
--------------------------------------------------------------------------
@{fg text}Syntax: ClearRexxMsg1k
Modes: Amiga

Description:
ClearRexxMsg is used to delete and clear an ArgString from one ormore of
the Argument slots in a RexxMsg Structure.  This is most useful for the 
more advanced programmer wishing to take advantage of the Arexx #RXFUNC 
abilities.

The arguments are a LONGWORD address of a RexxMsg structure. 
ClearRexxMsg will always work from slot number 1 forward to 16.

	Port.l=CreateMsgPort("TestPort")
	If Port = NULL Then End
	msg.l=CreateRexxMsg(Port,"vc","TestPort")
	If msg=NULL Then End
	SendRexxCommand msg,"open",#RXCOMM|#RXFF_RESULT
	wait:WHILE GetMsg_(Port) <> msg:Wend ;Wait for reply to come
	ClearRexxMsg msg                     ;Delete the Command string
                                              we sent

@{fg shine}NOTE: ClearRexxMsg() is called automatically by RexxEvent() 
so the need to call this yourself is removed unless you have not sent 
the RexxMsg to Arexx.@{fg text}
@ENDNODE
@NODE AE05
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: CreateArgString()@{fg text}
---------------------------------------------------------------------------
Syntax: ArgString.l=CreateArgString("this is a string")
Modes: Amiga

Description:
CreateArgString() builds an ARexx compatible ArgString structure around
the provided string.  All strings sent to, or received from Arexx are in
the form of ArgStrings. See the TYPE RexxARG.

If all is well the return will be a LONG address of the ArgString 
structure. The pointer will actually point to the NULL terminated String
with the remainder of the structure available at negative offsets.

	arg.l=CreateArgString("this is a string")
  	IF arg=0 THEN Error_Routine{}:ENDIF
	DeleteArgString arg

@{fg shine}NOTE:@{fg text} An ArgString maybe used as a normal BB2 string variable
by simple conversion using PEEK$ 

i.e. msg$=PEEK$(arg) or perhaps NPRINT PEEK$(arg)

@{fg shine}NOTE:@{fg text} Most of the BB2 Arexx Functions call this themselves and 
there will be only limited need for you to access this function.
@ENDNODE
@NODE AE06
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: DeleteArgString
--------------------------------------------------------------------------
@{fg text}Syntax:DeleteArgString ArgString
Modes: Amiga

Description:
DeleteArgString is designed to Delete ArgStrings allocated by either 
Blitz2 or ARexx in a system friendly way. It takes only one argument the
LONGWORD address of an ArgString as returned by CreateArgString().

	arg.l=CreateArgString("this is a string")
  	IF arg=0 THEN Error_Routine{}:ENDIF
	DeleteArgString arg

@{fg shine}NOTE:@{fg text} This function is also called automatically by most of 
the BB2 Arexx Functions that need it so you should only need to call this on 
rare occations.
@ENDNODE
@NODE AE07
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: SendRexxCommand
--------------------------------------------------------------------------
@{fg text}SendRexxCommand rexxmsg,"commandstring",#RXCOMM|#RXFF_RESULT
Modes: Amiga

Description:
SendRexxCommand is designed to fill and send a RexxMsg structure to 
ARexx inorder to get ARexx to do something on your behalf.

The arguments are as follows;

Rexxmsg is the LONGWORD address of a RexxMsg structure as returned by 
CreateRexxMsg().

Commandstring is the command string you wish to send to ARexx. This is a
string as in "this is a string" and will vary depending on what you wish
to do with ARexx. Normally this will be the name of an ARexx script file
you wish to execute. ARexx will then look for the script by the name as 
well as the name with the exten added.(this is the exten you used when 
you created the RexxMsg structure using CreateRexxMsg()). This could 
also be a string file. That is a complete ARexx script in a single line.

ActionCodes are the flag values you use to tell ARexx what you want it 
to do with the commandstring you have supplied. The possible flags are 
as follows;

@{fg shine}COMMAND (ACTION) CODES@{fg text}

The command codes that are currently implemented in the resident process
are described below. Commands are listed by their mnemonic codes,
followed by the valid modifier flags. The final code value is always the
logical OR of the code value and all of the modifier flags selected. The
command code is installed in the rm_Action field of the message packet.

@{fg shine}USAGE: RXADDCON@{fg text}

This code specifies an entry to be added to the Clip List. Parameter 
slot ARGO points to the name string,slot ARG1 points to the value 
string,and slot ARG2 contains the length of the value string.

The name and value arguments do not need to be argstrings,but can be 
just pointers to storage areas. The name should be a null-terminated 
string,but the value can contain arbitrary data including nulls.

@{fg shine}USAGE: RXADDFH@{fg text}

This action code specifies a function host to be added to the Library 
List. Parameter slot ARGO points to the (null-terminated) host name 
string,and slot ARG1 holds the search priority for the node. The search
 priority should be an integer between 100 and -100 inclusive;the 
remaining priority ranges are reserved for future extensions. If a node
already exists with the same name,the packet is returned with a warning
level error code.

Note that no test is made at this time as to whether the host port 
exists.

@{fg shine}USAGE:RXADDLIB@{fg text}

This code specifies an entry to be added to the Library List. Parameter
slot ARGO points to a null-terminated name string referring either to a
function library or a function host. Slot ARG1 is the priority for the 
node and should be an integer between 100 and -100 inclusive;the 
remaining priority ranges are reserved for future extensions. Slot ARG2
contains the entry Point offset and slot ARG3 is the library version 
number. If a node already exists with the same name,the packet is 
returned with a warning level error code. Otherwise,a new entry is added
and the library or host becomes available to ARexx programs. Note that 
no test is made at this time as to whether the library exists and can be
opened.

@{fg shine}USAGE:RXCOMM [RXFF_TOKEN] [RXFF_STRING] [RXFF_RESULT] [RXFF_NOIO]@{fg text}

Specifies a command-mode invocation of an ARexx program. Parameter slot
ARGO must contain an argstring Pointer to the command string. The 
RXFB_TOKEN flag specifies that the command line is to be tokenized 
before being passed to the invoked program. The RXFB_STRING flag bit 
indicates that the command string is a "string file." Command 
invocations do not normally return result strings,but the RXFB_RESULT
flag can be set if the caller is prepared to handle the cleanup 
associated with a returned string. The RXFB_NOIO modifier suppresses the
inheritance of the host's input and output streams.

@{fg shine}USAGE:RXFUNC [RXFF_RESULT] [RXFF_STRING] [RXFF_NOIO] argcount@{fg text}

This command code specifies a function invoction. Parameter slot ARGO
contains a pointer to the function name string,and slots ARG1 through 
ARG15 point to the argument strings,all of which must be passed as 
argstrings. The lower byte of the command code is the argument count;
this count excludes the function name string itself. Function calls 
normally set the RXFB_RESULT flag,but this is not mandatory. The 
RXFB_STRING modifier indicates that the function name string is actually
a "string file". The RXFB_NOIO modifier suppresses the inheritance of 
the host's input and output streams.

@{fg shine}USAGE:RXREMCON@{fg text}

This code requests that an entry be removed from the Clip List. 
Parameter slot ARGO points to the null-terminated name to be removed. 
The Clip List is searched for a node matching the supplied name,and if a
match is found the list node is removed and recycled. If no match is 
found the packet is returned with a warning error code.

@{fg shine}USAGE:RXREMLIB@{fg text}

This command removes a Library List entry. Parameter slot ARGO points to
the null terminated string specifying the library to be removed. The 
Library List is searched for a node matching the library name,and if a
match is found the node is removed and released. If no match is found 
the packet is returned with a warning error code. The libary node will 
not be removed if the library is currently being used by an ARexx 
program.

@{fg shine}USAGE:RXTCCLS@{fg text}

This code requests that the global tracing console be closed. The 
console window will be closed immediately unless one or more ARexx 
programs are waiting for input from the console. In this event,the 
window will be closed as soon as the active programs are no longer 
using it.

@{fg shine}USAGE:RXTCOPN@{fg text}

This command requests that the global tracing console be opened. Once
the console is open,all active ARexx programs will divert their tracing
output to the console. Tracing input(for interactive debugging)will also
be diverted to the new console. Only one console can be opened;
subsequent RXTCOPN requests will be returned with a warning error 
message.

@{fg shine}MODIFIER FLAGS@{fg text}

Command codes may include modifier flags to select various processing 
options. Modifier flags are specific to certain commands,and are 
ignored otherwise.

@{fg shine}RXFF_NOIO.@{fg text}

This modifier is used with the RXCOMM and RXFUNC command codes to 
suppress the automatic inheritance of the host's input and output 
streams.

@{fg shine}RXFF_NONRET.@{fg text}

Specifies that the message packet is to be recycled by the resident 
process rather than being returned to the sender. This implies tht 
the sender doesn't care about whether the requested action succeeded,
since the returned packet provides the only means of acknowledgement. 

(RXFF_NONRET MUST NOT BE USED AT ANY TIME)

@{fg shine}RXFF_RESULT.@{fg text}

This modifer is valid with the RXCOMM and RXFUNC commands,and requests 
that the called program return a result string. If the program EXITs(or
RETURNs)with an expression,the expression result is returned to the 
caller as an argstring. This ArgString then becomes the callers 
responsibility to release. This is automatically accomplished by using
GetResultString(). It is therefore imperitive that if you use 
RXFF_RESULT then you must use GetResultString() when the message packet
is returned to you or you will incure a memory loss equal to the size of
the ArgString Structure.

@{fg shine}RXFF_STRING.@{fg text}

This modifer is valid with the RXCOMM and RXFUNC command codes. It 
indicates that the command or function argument(in slot ARGO)is a 
"string file" rather than a file name.

@{fg shine}RXFF_TOKEN.@{fg text}

This flag is used with the RXCOMM code to request that the command 
string be completely tokenized before being passed to the invoked 
program. Programs invoked as commands normally have only a single 
argument string. The tokenization process uses "white space" to 
separate the tokens,except within quoted strings. Quoted strings can use
either single or double quotes,and the end of the command string(a null 
character) is considered as an implicit closing quote.

@{fg shine}EXAMPLES:@{fg text}

	Port.l=OpenRexxPort("TestPort")
    	If Port = NULL End:EndIf
	msg.l=CreateRexxMsg(Port,"vc","TestPort")
    	If msg=NULL End:EndIf
	SendRexxCommand msg,"open",#RXCOMM|#RXFF_RESULT
@ENDNODE
@NODE AE08
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: ReplyRexxMsg
--------------------------------------------------------------------------
@{fg text}Syntax: ReplyRexxMsg rexxmsg,Result1,Result2,"ResultString"
Modes: Amiga

Description:
When ARexx sends you a RexxMsg (Other than a reply to yours i.e. 
sending yours back to you with results) you must repl to the message
before ARexx will continue or free that memory associated with that 
RexxMsg.  ReplyRexxMsg accomplishes this for you. ReplyRexxMsg also will
only reply to message that requires a reply so you do not have to 
include message checking routines in your source simply call 
ReplyRexxMsg on every message you receive wether it is a command or not.

The arguments are;

rexxmsg is the LONGWORD address of the RexxMsg Arexx sent you as 
returned by GetMsg_(Port).

Result1 is 0 or a severity value if there was an error.

Result2 is 0 or an Arexx error number if there was an error processing 
the command that was contained in the message.

ResultString is the result string to be sent back to Arexx. This will 
only be sent if Arexx requested one and Result1 and 2 are 0.

ReplyRexxMsg rexxmsg,0,0,"THE RETURNED MESSAGE"
@ENDNODE
@NODE AE09
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: GetRexxResult()
--------------------------------------------------------------------------
@{fg text}Syntax: Result.l=GetRexxResult(rexxmsg,ResultNum)
Modes: Amiga

Description:
GetRexxResult extracts either of the two result numbers from the RexxMsg
structure.  Care must be taken with this Function to ascertain wether 
you are dealing with error codes or a ResultString address.  Basically 
if result 1 is zero then result 2 will either be zero or contain a 
ArgString pointer to the ResultString. This should then be obtained 
using GetResultString().

The arguments to GetRexxResult are;

rexxmsg is the LONGWORD address of a RexxMsg structure returned from 
ARexx.

ResultNum is either 1 or 2 depending on wether you wish to check result 
1 or result 2.

	;print the severity code if there was an error

	NPrint GetRexxResult(msg,1)

	;check for ResultString and get it if there is one

	IF GetRexxResult(msg,1)=0
	IF GetRexxResult(msg,2) THEN GetResultString(msg)	
	ENDIF
@ENDNODE
@NODE AE0A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: GetRexxCommand()
--------------------------------------------------------------------------
@{fg text}Syntax: String$=GetRexxCommand(msg,1)
Modes: Amiga

Description:
GetRexxCommand allows you access to all 16 ArgString slots in the given 
RexxMsg. Slot 1 contains the command string sent by ARexx in a command
message so this allows you to extract the Command.

Arguments are:

rexxmsg is a LONGWORD address of the RexxMsg structure as returned by 
 RexxEvent()

ARGNum is an integer from 1 to 16 specifying the ArgString Slot you wish
to get an ArgString from.

@{fg shine}BEWARE YOU MUST KNOW THAT THERE IS AN ARGSTRING THERE.@{fg text}
@ENDNODE
@NODE AE0B
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: GetResultString()
--------------------------------------------------------------------------
@{fg text}Syntax: String$=GetResultString(rexxmsg)
Modes: Amiga

Description:
GetResultString allows you to extract the result string returned to you
by ARexx after it has completed the action you requested. ARexx will 
only send back a result string if you asked for one (using the 
ActionCodes) and the requested action was successful.

	;check for ResultString and get it if there is one

	IF GetRexxResult(msg,1)=0
  	IF GetRexxResult(msg,2) THEN GetResultString(msg)
	ENDIF

@{fg shine}NOTE:@{fg text} Do not attempt to DeleteArgString the result
string returned by this function as the return is a string and not an 
ArgString pointer. BB2 will automatically delete this argstring for you.
@ENDNODE
@NODE AE0C
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: RexxEvent()
--------------------------------------------------------------------------
@{fg text}Syntax: Rmsg.l=RexxEvent(Port)
Modes: Amiga

Description:
RexxEvent is our Arexx Equivalent of EVENT().  It's purpose is to check
the given Port to see if there is a message waiting there for us.

It should be called after a WAIT and will either return a NULL to us if
there was no message or the LONG address of a RexxMsg Structure if 
there was a message waiting.

Multiple Arexx MsgPorts can be handled using separate calls to 
RexxEvent():

Wait:Rmsg1.l=RexxEvent(Port1):Rmsg2.l=RexxEvent(Port2):etc

RexxEvent also takes care of automatically clearing the rexxmsg if it is
our message being returned to us.

The argument is the LONG address of a MsgPort as returned by 
CreateMsgPort().

@{fg shine}EXAMPLES:@{fg text}

	Repeat
  		Wait:Rmsg.l=REXXEVENT(Port):ev.l=EVENT
  		IF IsRexxMsg(Rmsg) Process_Rexx_Messages{}:ENDIF
  		;
  		;
  		;Rest of normal intuition event loop statements case etc
	Until ev =$200

SEE ALSO: @{" Wait() " link BUM_WAIT},@{" CreateMsgPort() " link E101}
@ENDNODE
@NODE AE0D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: IsRexxMsg()
--------------------------------------------------------------------------
@{fg text}Syntax: IsRexxMsg(rexxmsg)
Modes: Amiga

Description:
IsRexxMsg tests the argument (a LONGWORD pointer hopefully to a message
packet) to see if it is a RexxMsg Packet. If it is TRUE is returned (1)
or FALSE if it is not (0).

	Repeat
  		Wait:Rmsg.l=REXXEVENT:ev.l=EVENT
  		IF IsRexxMsg(Rmsg) Process_Rexx_Messages{}:ENDIF
  		;
  		;
		;Rest of normal intuition event loop statements case etc
	Until ev =$200

As the test is non destructive and extensive passing a NULL value or a 
LONGWORD that does not point to a Message structure (Intuition or Arexx)
will safely return as FALSE.

SEE ALSO:  @{" CreateRexxMsg() " link AE01},@{" GetMsg_() " link BUM_GETMSG}
@ENDNODE
@NODE AE0E
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: RexxError()
--------------------------------------------------------------------------
@{fg text}Syntax: ErrorString$=RexxError(ErrorCode)
Modes: Amiga

Description:
RexxError converts a numerical error code such as you would get from 
GetRexxResult(msg,2) into an understandable string error message.  If 
the ErrorCode is not known to ARexx a string stating so is returned  
this ensures that this function will always succeed.

	NPRINT RexxError(5)

SEE ALSO: @{" GetRexxResult() " link BUM_GETREXXRESULT}
@ENDNODE
@NODE AE81
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSPrint@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSPrint font_num.b,x.w,y.w,a$/string_address
        [,preferences,colour]

This command prints the string a$ in an FNS font at the position X,Y.
Font_num is the number of a previously installed FNS font, the output
of this command is sent to the current FNS bitmap (see FNSOutput). You
can setting a drawing rectangle on the currently used bitmap to limit
the output of the font - see FNSClip for more info.

Instead of a string, though, you can give the address of a null
terminated string in memory.  Also, you can change the colour that text 
is being output in in the current string by putting the character ASCII 1
followed by a byte value from 0-255 specifying the colour to change to.

The optional parameters are for controlling how the text is output.
They automatically overide the default setting but are not permanent,
i.e. the default output style and colour are restored after the line
has been output.  Use FNSInk and FNSPrefs to set the default font
output mode.

  See: @{" FNSOuput  " link AE83},@{" FNSInk    " link AE84},@{" FNSPrefs  " link AE85},@{" FNSOrigin " link AE8D},@{" FNSClip   " link AE87}
@ENDNODE
@NODE AE02
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: DeleteRexxMsg
--------------------------------------------------------------------------
@{fg text}Syntax: DeleteRexxMsg rexxmsg
Modes: Amiga

Description:
DeleteRexxMsg simply deletes a RexxMsg Structure previously allocated by 
CreateRexxMsg().  It takes a single argument which is the long address 
of a RexxMsg structure such as returned by CreateRexxMsg().

	msg.l=CreateRexxMsg(Port,"rexx","HostName")
	IF msg=0 THEN Error_Routine{}
	DeleteRexxMsg msg

Again if you neglect to delete the RexxMsg structure Blitz2 will do this
for you on exit of the program.
@ENDNODE
@NODE AE83
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSOutput@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSOutput bitmap#[,clip_update]

This command selects a bitmap for use by the FNS routines, the bitmap
must be a previously reserved Blitz 2 bitmap object.  After this
command all FNS font printing will occur on the selected bitmap.  The
optional parameter allows you to update the clipping rectangle for
output at the same time as setting the output bitmap.  Setting
clip_update to a non-zero value will cause the clipping area to
automatically be set to the dimensions of the selected bitmap.

NOTE:
-----
This command MUST be used before you attempt to use FNSPrint.
The maximum depth of the bitmap for printing is 8 bitplanes since this
is all Blitz 2 currently supports.

See: @{" FNSClip " link AE87},@{" FNSClipOutput " link AE88}
@ENDNODE
@NODE AE84
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSInk@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSInk colour#

This sets the output colour for the FNS font drawing routines. The 
number range is dependant on the depth of the destination bitmap, the
max posible range, though, is limited to 0 to 255 colours.  The FNS
output routines will attempt to draw in all the bitplanes of the
selected bitmap, any extra bits in the ink colour will be ignored.

See: @{" FNSPrefs " link AE85}
@ENDNODE
@NODE AE85
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSPrefs@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSInk preferences[,colour#]

This sets the output prefs for the FNS font drawing routines but at
the same time also sets the colour for the FNS routines (optional).
At the moment the following options are available, the bits of the
preferences byte are used to select the different options:

                            bit 0: Centred text
                            bit 1: Bold text
			    bit 2: Underline
			    bit 3: Right aligned

See: @{" FNSInk " link AE84},@{" FNSPrint " link AE81},@{" FNSLength " link AE8B}
@ENDNODE
@NODE AE86
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: FNSHeight@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: height.w=FNSHeight(font_num)

This routine returns the height of a previously installed FNS font.
Font_num should be >=0 and <=15.

See: @{" FNSUnderline " link AE8A},@{" FNSWidth " link AE8E}
@ENDNODE
@NODE AE87
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSClip@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSClip x1,y1,x2,y2

This command is used to limit the output of the FNSPrint command.  The
co-ordinates given should describe a rectangle that is to be used to
clip the output.  This rectangle can be thought of as a window on the
bitmap - no printing can occur outside of the window.
X1,Y1 are the top left corner of the clipping rectangle and X2,Y2 are 
the bottom right corner.  Please note that both X co-ordinates should be
multiples of 16 and that X2 should be the heightest multiple of 16 that
you do not wish output to occur at.  Thus if your bitmap is 320x256 then
you would use the following to set the clipping rectangle to the full
bitmap:
		FNSClip 0,0,320,256

See: @{" FNSClipOutput " link AE88},@{" FNSOutput " link AE83}
@ENDNODE
@NODE AE88
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSClipOutput@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSClipOutput

This command is used to quickly set the clipping rectangle for the FNS
commands to the full size of a bitmap.

See: @{" FNSClip " link AE87},@{" FNSOutput " link AE83}
@ENDNODE
@NODE AE89
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: RemoveFNS@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: RemoveFNS font#

This command simply removes an installed font from the list of font
held internally by the FNS routines.  There is no real need to remove
fonts as installing fonts takes up no memory, except of course the 
actual font data.  You do not need to remove FNS fonts before ending a
program.

See: @{" InstallFNS " link AE82}
@ENDNODE
@NODE AE8A
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: FNSUnderline@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: under_pos=FNSUnderline(font_num)

This routine returns the underline position of the selected FNS font.
Font_num should be >=0 and <=15.

See: @{" FNSHeight " link AE86},@{" FNSWidth " link AE8E}
@ENDNODE
@NODE AE8B
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: FNSLength@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: a=FNSLength (font#,a$[,prefs])

This command is equivalent of the basic command a=len(a$) except that
it returns the x size, in pixels, of the string if it were to be printed
in the font font#.  The optional preferences parameter allows you to
adjust the output of the string, if you specify no preferences then this
function will use the previously selected preferences to calculate the
string length.  Using preferences allows you to account for things like
bold text output.

See: @{" FNSPrefs " link AE85}
@ENDNODE
@NODE AE8C
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: FNSVersion@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: a.q=FNSVersion

This command allows you to test the version number of the FNS library
that your program is being compiled with.  It returns a quick float 
value and so you should use a quick float variable for the answer.  This
doc file was written for version 0.991 of the library.


FNS Font file format:
=====================

Header: 256 bytes.
	0-3   : 'FNS.' - file identifier - looked for by InstallFNS
	4-5   : height of font (#word)
	6-7   : width of font in multiples of 16 (#word)
	8-9   : underline position (offset from top of font, #word)
	10-11 : size of data for each font character
		[ (WIDTH/8) * height ]
	32-255: byte giving widths of each character in the font.
		These bytes doesn't really hold the width, rather
		they hold the value to add to the X position of the
		character to get to the position to print the next
		character at (!).

	256-EOF:character data starting at ASCII 32 (space)
@ENDNODE
@NODE AE8D
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Statement: FNSOrigin@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSOrigin [x,y]

This command is used to set an origin co-ordinate for printing output.
Whenever you use FNSPrint, the origin co-ordinates are added (as words)
to the co-ordinates you give for output.  I.e. setting the origin at
100,0 and printing at co-ordinates 0,0 will cause the output to be at
100,0.

Using this command without any parameters will cause the origin to
be reset to the position 0,0.
@{fg shine}Note:@{fg text} This command does not affect the use of the FNSClip command.
@ENDNODE
@NODE AE8E
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}
Function: FNSWidth@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: width.w=FNSWidth(font_num)

This routine returns the width in multiples of 16 of the selected FNS
font.  Font_num should be >=0 and <=15.

See: @{" FNSHeight " link AE86},@{" FNSUnderline " link AE8A}
@ENDNODE
@NODE AE8F
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: FNSLoad@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: suc=FNSLoad (filename$,font#)

Description:
This command is used to load a font from disk and automatically install
it for use by the FNS commands.  Filename$ should be the full name of 
the file to load (path$+file$) and font# should be 0<= and >=15.  This 
command returns a value of -1 for failure or the font number the font 
was installed as (see InstallFNS).  A failure could either be a load 
error or an installation error.

You should make sure that the file you load IS an FNS font file.

@{fg shine}IMPORTANT NOTE:@{fg text} to use this command, you must have 
our @{" FUNC " link FUNCMAIN}library installed on your copy of Blitz2.  
Running it without this library could, and probably will, cause a major 
crash of your computer. 

Also note that if you do an ERASEALL (this is a @{" FUNC " link FUNCMAIN}library command for
erasing banks), you will DELETE your font from memory!
@ENDNODE
@NODE AE90
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Function: FNSSlot@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: address.l=FNSSlot

Steve: this command was not in the doc file.

@ENDNODE
@NODE AE91
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: FNSUnLoad@{fg text}
--------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSUnLoad font#

This command is used to remove a font installed with the FNSLoad 
command. When this command runs it automatically removes the font 
entry in the FNS commands and deletes the memory that the font file is
held in. There is no need to do this at the end of a program as the 
@{" FUNC " link FUNCMAIN}library automatically frees up all allocated 
memory.

@ENDNODE
@NODE AE92
@toc "Blitz2:Help.Data/BBOnLineHelp.guide/MAIN"
@{fg shine}Statement: FNSSetTab@{fg text}
-------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FNSSetTab tab_width

Description:
Use this command to set the tab spacing used when printing. The value
given should be the spacing IN pixels.
@ENDNODE

